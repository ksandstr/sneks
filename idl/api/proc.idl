
#ifndef __API_PROC_IDL__
#define __API_PROC_IDL__

#include <muidl.idl>
#include <l4x2.idl>
#include <posixlike.idl>


module Sneks {

[StubPrefix(__proc), IfaceLabel(0xe801)]
interface Proc
{
	typedef string<512> pathbuf;
	typedef string<4096> argbuf; /* substrings separated by 0x1e (RS). */

	/* TODO: move these into posixlike.idl or somewhere */
	typedef unsigned long uid_t, gid_t;

	[Label(0x1234)]		/* (provisional) */
	void create_thread([MR(1)] out L4X2::ThreadId tid)
		raises(Posix::Errno);

	/* not replied to if successful and @tid is the caller, even if the
	 * message was propagated. @utcb_addr is the raw local form of @tid
	 * as available to the caller.
	 */
	void remove_thread(in L4X2::ThreadId tid, in L4X2::word utcb_addr)
		raises(Posix::Errno, muidl::NoReply);

	/* spawns a child process without the expense of fork+exec, or from a
	 * systask such as to launch userspace helpers or /sbin/init. constructs
	 * the argument and environment regions using @args and @envs provided;
	 * the child process need not care whether it was loaded due to exec or
	 * spawn. this interface is different from, and more low-level than, the
	 * standard posix_spawn(3); the two should not be confused.
	 *
	 * since muidl is broken wrt sequences of structs, we pass the fdlist
	 * structure's components in parallel. the length of the resulting fdlist
	 * is the length of the shortest component sequence. this kludge will go
	 * away once muidl gets unfucked.
	 *
	 * return value is the new process ID.
	 */
	typedef sequence<L4X2::ThreadId, 1024> fd_servs;
	typedef sequence<L4X2::word, 1024> fd_cookies;
	typedef sequence<long, 1024> fd_fds;
	unsigned short spawn(
		in pathbuf filename, in argbuf args, in argbuf envs,
		in fd_servs servs, in fd_cookies cookies, in fd_fds fds)
			raises(Posix::Errno);

	/* like POSIX kill(2) */
	void kill(in long pid, in long sig)
		raises(muidl::NoReply, Posix::Errno);

	/* POSIX exit(3). since there's no waitpid(2), @status goes nowhere. */
	void exit(in long status)
		raises(muidl::NoReply);

	/* like Linux waitid(2), but contents of siginfo_t are passed explicitly.
	 * siginfo_t fields that Linux defines but which aren't specified in the
	 * waitid(2) manpage aren't supported. values of idtype and the si_*
	 * return values are defined in <sneks/process.h>.
	 */
	void wait(
		[MR(1)] out long si_pid, [MR(2)] out long si_uid,
		[MR(3)] out long si_signo, [MR(4)] out long si_status,
		[MR(5)] out long si_code,
		in long idtype, in long id, in long options)
			raises(muidl::NoReply, Posix::Errno);

	/* like POSIX fork(2), but leaves userspace I/O resources up to the
	 * caller. launches a thread in the destination address space according to
	 * @sp and @ip and delivers its global ID in @tid, or raises Posix::Errno
	 * like fork(2) would.
	 */
	void fork(
		out L4X2::ThreadId tid,
		in L4X2::word sp, in L4X2::word ip)
			raises(Posix::Errno);

	/* set up the signal delivery page for the calling process. before this
	 * function is called from the result of execve() or spawn(), signal
	 * response occurs according to the default disposition and so the
	 * delivery page mechanism won't be used; this will be true until the
	 * first Proc::setsigmask call even if the page has been defined.
	 *
	 * @sigpage_addr is the address of a aligned PAGE_SIZE segment reserved in
	 * the process' heap (paged by vm) for signal delivery. @tail_data is a
	 * buffer in the last sizeof sigpagetail bytes of that page, and
	 * @handler_offset will indicate a position relative to @sigpage_addr
	 * where the caller should store the address of the signal delivery bottom
	 * half.
	 *
	 * there are no error returns because this function can only fail due to
	 * string transfer timeout.
	 */
	typedef sequence<octet, 1024> sigpagetail;
	void sigconfig(
		in L4X2::word sigpage_addr,
		out sigpagetail tail_data,
		out long handler_offset);

	/* change or query the per-process signal sets.
	 *
	 * @set_name is 0 for the ignore set, 1 for the default set, 2 for the
	 * block set, 3 for the pending set (per sigprocmask(2)), and 4 for the
	 * pending set but obscured by the block set. the pending set will not be
	 * modified by @or_bits, but @and_bits will clear it. return value is the
	 * old mask's value. setting a bit in the default set clears the
	 * corresponding bit in the ignore set, and vice versa. clearing a bit in
	 * the block set which was set in the pending set will cause that signal
	 * to fire. @and_bits is applied before @or_bits, so that it's possible to
	 * set every bit to a given value in a single call.
	 */
	unsigned long long sigset(
		in long set_name,
		in unsigned long long or_bits,
		in unsigned long long and_bits)
			raises(muidl::NoReply);

	/* what it says on the tin. effectively getresuid(2) and getresgid(2)
	 * rolled up.
	 */
	void getresugid(
		out uid_t real_uid, out uid_t eff_uid, out uid_t saved_uid,
		out gid_t real_gid, out gid_t eff_gid, out gid_t saved_gid);

	/* when @mode is 1, Proc::setresugid behaves like setuid(@real_uid) and
	 * then setgid(@real_gid), where applicable.
	 * when @mode is 2, the semantics are of setreuid(2) and setregid(2)
	 * respectively.
	 * when @mode is 3, setresuid(2) and setresgid(2).
	 *
	 * to ignore a parameter, pass -1. this is required for parameters not
	 * applied per @mode. one might look at @mode as specifying the semantics
	 * by reference to number of parameters.
	 */
	void setresugid(
		in short mode,
		in uid_t real_uid, in uid_t eff_uid, in uid_t saved_uid,
		in gid_t real_gid, in gid_t eff_gid, in gid_t saved_gid)
			raises(Posix::Errno);
};


};

#endif
