
#ifndef __API_PROC_IDL__
#define __API_PROC_IDL__

#include <muidl.idl>
#include <l4x2.idl>
#include <posixlike.idl>


module Sneks {

[StubPrefix(__proc), IfaceLabel(0xe801)]
interface Proc
{
	typedef string<512> pathbuf;
	typedef string<4096> argbuf; /* substrings separated by 0x1e (RS). */

	[Label(0x1234)]		/* (provisional) */
	void create_thread([MR(1)] out L4X2::ThreadId tid)
		raises(Posix::Errno);

	/* not replied to if successful and @tid is the caller, even if the
	 * message was propagated. @utcb_addr is the raw local form of @tid
	 * as available to the caller.
	 */
	void remove_thread(in L4X2::ThreadId tid, in L4X2::word utcb_addr)
		raises(Posix::Errno, muidl::NoReply);

	/* spawns a child process without the expense of fork+exec, or from a
	 * systask such as to launch userspace helpers or /sbin/init. constructs
	 * the argument and environment regions using @args and @envs provided;
	 * the child process need not care whether it was loaded due to exec or
	 * spawn.
	 *
	 * return value is the new process ID.
	 */
	unsigned short spawn(
		in pathbuf filename, in argbuf args, in argbuf envs)
			raises(Posix::Errno);

	/* like POSIX kill(2) */
	void kill(in long pid, in long sig)
		raises(Posix::Errno);
};


};

#endif
