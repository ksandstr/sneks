
#ifndef __API_VM_IDL__
#define __API_VM_IDL__

#include <muidl.idl>
#include <l4x2.idl>
#include <posixlike.idl>


module Sneks {

/* (short for virtual memory) */
[StubPrefix(__vm), IfaceLabel(0xe802)]
interface VM
{
	/* get these from posixlike.idl */
	typedef unsigned long size_t;
	typedef unsigned long off_t;
	typedef unsigned short pid_t;

	/* as in mmap(2) when @target_pid == 0. otherwise, EACCES unless called
	 * from a systask that spawned @target_pid which hasn't yet been serviced
	 * a single page fault. @addr, @offset, and @length must be aligned to
	 * system minimum physical page size.
	 */
	void mmap(
		in pid_t target_pid,
		inout L4X2::word addr, in size_t length, in long prot, in long flags,
		in L4X2::ThreadId fd_serv, in L4X2::word fd, in off_t offset)
			raises(Posix::Errno);

	/* implied @target_pid = getpid(). works as POSIX munmap(2). */
	void munmap(in L4X2::word addr, in size_t length)
		raises(Posix::Errno);

	/* virtual memory part of fork(2). systask only. if @srcpid == 0, creates
	 * an empty space which must be initialized with configure(). otherwise, a
	 * copy-on-write duplicate of @srcpid is created and the utcb and kip
	 * areas inherited.
	 */
	void fork(in pid_t srcpid, in pid_t destpid)
			raises(Posix::Errno);

	/* configuration of freshly-created address spaces. systask only. @utcb
	 * must be located before @kip, which must start where @utcb ends; vm will
	 * additionally map the constant system information page after @kip.
	 * return value is the last reserved address.
	 */
	void configure(
		out L4X2::word last_resv,
		in pid_t pid,
		in L4X2::Fpage utcb, in L4X2::Fpage kip)
			raises(Posix::Errno);

	typedef sequence<octet, 4096> page;

	/* upload a single page of memory to a target process address space. a
	 * short page is padded out with zeroes. EACCES unless requirements are
	 * met for mmap's @target_pid. @prot and @flags as in mmap, except that
	 * @flags must always specify MAP_ANONYMOUS and MAP_FIXED, and @prot must
	 * be nonzero.
	 */
	void upload_page(
		in pid_t target_pid,
		in L4X2::word addr, in page data,
		in long prot, in long flags)
		raises(Posix::Errno);

	/* systask only. send breath-of-life to a newborn thread. rc is 0 or L4
	 * ErrorCode of breath-of-life transaction under a 0 send timeout.
	 */
	void breath_of_life(
		out L4X2::word rc,
		in L4X2::ThreadId target,
		in L4X2::word sp, in L4X2::word ip);

	/* as brk(2). */
	void brk(in L4X2::word addr)
		raises(Posix::Errno);
};

};

#endif
