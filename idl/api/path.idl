
#ifndef __API_PATH_IDL__
#define __API_PATH_IDL__

#include <muidl.idl>
#include <l4x2.idl>
#include <posixlike.idl>

#include <api/io.idl>


module Sneks {

/* path resolution in a filesystem in which another filesystem may have been
 * attached, and which may in turn be attached to a parent filesystem.
 */
[StubPrefix(__path), IfaceLabel(0xe808)]
interface Path
{
	const long PATH_MAX = 4000;
	typedef string<PATH_MAX> path;

	typedef unsigned long object;
	typedef L4X2::word cookie;

	/* values of resolve/@ifmt. deliberately assigned as the corresponding
	 * DT_* for Sneks::Directory shifted left by 12.
	 */
	const long S_IFMT = 0xf000;	/* format mask */
	const long S_IFDIR = 0x4000;
	const long S_IFCHR = 0x2000;
	const long S_IFBLK = 0x6000;
	const long S_IFREG = 0x8000;
	const long S_IFIFO = 0x1000;
	const long S_IFLNK = 0xa000;
	const long S_IFSOCK = 0xc000;

	/* @dirfd == 0 refers to the filesystem's root directory. this may be
	 * distinct from the filesystem's mount point, which is a directory on the
	 * parent filesystem; the exception being when the parent does not exist.
	 *
	 * @path is always relative to @dirfd, so it should never have a leading
	 * slash. when resolve is propagated, @dirfd refers to the propagator's
	 * set of handles.
	 */
	void resolve(
		out object inode, out L4X2::ThreadId server,
		out long ifmt, out cookie cookie,
		[MR(2)] in IO::handle dirfd, in path path, [MR(3)] in long flags)
			raises(Posix::Errno, muidl::NoReply);

	/* reverse resolution of the path that would resolve() to the object
	 * described by @desc. @suffix is appended to the result with a separating
	 * slash if the result is not empty, and returned verbatim otherwise.
	 *
	 * resulting @path is either the full path down from the root directory
	 * without the leading slash, or -ENAMETOOLONG if the result would exceed
	 * PATH_MAX. in the latter case, or to tell filesystem boundaries, the
	 * client should call get_path_fragment() instead.
	 */
	void get_path(out path path, in IO::handle desc, in path suffix)
		raises(Posix::Errno, muidl::NoReply);

	/* reverse resolution of some part of the path that would resolve() to the
	 * object described by @desc, or if @desc is 0, the incoming values of
	 * the @obj/@cookie pair.
	 *
	 * returns a fragment excluding the leading slash in @path. if the
	 * fragment doesn't start at the root directory, the @obj/@server/@cookie
	 * triple is the resolve() result (w/ @ifmt=S_IFDIR implied) of where the
	 * fragment starts.
	 */
	void get_path_fragment(out path path,
		inout object obj, out L4X2::ThreadId server, inout cookie cookie,
		in IO::handle desc)
			raises(Posix::Errno, muidl::NoReply);

	/* for implementing stat(2) and fstatat(2) as a resolve-stat pair */
	void stat_object(in object obj, in cookie cookie, out IO::statbuf result)
		raises(Posix::Errno);
};

};

#endif
