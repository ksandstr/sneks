
#ifndef __API_IO_IDL__
#define __API_IO_IDL__

#include <muidl.idl>
#include <l4x2.idl>
#include <posixlike.idl>


module Sneks {

/* input/output services, i.e. character and block device providers. */
[StubPrefix(__io), IfaceLabel(0xe803)]
interface IO
{
	typedef long handle;

	struct statbuf {
		Posix::dev_t st_dev;
		Posix::ino_t st_ino;
		Posix::mode_t st_mode;
		Posix::nlink_t st_nlink;
		Posix::id_t st_uid, st_gid;
		Posix::dev_t st_rdev;
		Posix::off_t st_size;
		Posix::blksize_t st_blksize;
		Posix::blkcnt_t st_blocks;
		Posix::timespec st_atim, st_mtim, st_ctim;
	};

	/* bits for set_file_flags(). follows Linux. */
	const long O_NONBLOCK = 04000;

	/* bits for set_handle_flags(). follows Linux. */
	const long FD_CLOEXEC = 1;

	/* this is the weak I/O interface where data is copied through the
	 * microkernel, so the max transfer size can be fairly small.
	 */
	const long IOSEG_MAX = 65536;
	typedef sequence<octet, IOSEG_MAX> ioseg;

	/* sets @fd's flags' = (flags & @and_mask) | @or_mask. returns previous
	 * flags in @old_flags. raises EBADF when @fd doesn't exist.
	 *
	 * this alters the set of handle (descriptor) flags (FD_*) as opposed to
	 * file status flags (O_*), or some other set of flags accessed by ioctl.
	 */
	void set_handle_flags(out long old_flags,
		in handle fd, in long or_mask, in long and_mask)
			raises(Posix::Errno);

	/* alter status flags of file described by @fd. O_* analogue to
	 * set_handle_flags, with same call semantics.
	 */
	void set_file_flags(out long old_flags,
		in handle fd, in long or_mask, in long and_mask)
			raises(Posix::Errno);

	/* when write (read) blocks on a full (empty) buffer, wakeup happens in
	 * the form of an EAGAIN error result. when O_NONBLOCK is set, instead
	 * EWOULDBLOCK is raised.
	 *
	 * unlike pwrite(2), @offset can be -1 in which case the file's own
	 * position is both used and modified.
	 */
	unsigned short write(in handle fd, in Posix::off_t offset, in ioseg buf)
		raises(Posix::Errno, muidl::NoReply);

	/* unlike pread(2), @offset can be -1 in which case the file's own
	 * position is both used and modified. @length is not Posix::off_t
	 * to match the L4.X2 string transfer limit of 124M even when off_t
	 * changes to long long.
	 */
	void read(in handle fd, in long length, in Posix::off_t offset,
		out ioseg buf)
		raises(Posix::Errno, muidl::NoReply);

	/* raises like POSIX close(2) */
	[Label(0xabcd)]	/* provisional, for epoll's use */
	void close([MR(2)] in handle fd)
		raises(Posix::Errno);

	/* for implementing fstat(2). returns like it, but never EFAULT. */
	void stat_handle(in handle fd, out statbuf result)
		raises(Posix::Errno);

	/* dup3(2) analogue, except @newfd is out-only and @fd_flags is FD_*
	 * instead of O_*.
	 */
	void dup(out handle newfd, in handle oldfd, in long fd_flags)
		raises(Posix::Errno);

	/* interface for transferring file descriptors between tasks.
	 *
	 * dup_to() behaves like the two-parameter dup() but allows @receiver_pid
	 * to call touch() on @newfd to complete the ownership transfer. until
	 * touch() is called @newfd's lifetime follows the dup_to() caller's
	 * lifecycle. once touch() is called, the dup_to() caller is no longer
	 * allowed access to @newfd.
	 */
	void dup_to(out handle newfd, in handle oldfd, in Posix::pid_t receiver_pid)
		raises(Posix::Errno);
	void touch(in handle newfd)
		raises(Posix::Errno);

	/* returns 1 when @fd refers to a tty, 0 when it doesn't, and pops
	 * EBADF when @fd isn't even valid.
	 */
	octet isatty(in handle fd)
		raises(Posix::Errno);
};

};

#endif
