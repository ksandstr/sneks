
#ifndef __SYS_SYSMEM_IDL__
#define __SYS_SYSMEM_IDL__

#include <muidl.idl>
#include <l4x2.idl>
#include <posixlike.idl>


[StubPrefix(__sysmem), IfaceLabel(0xe001)]
interface Sysmem: L4X2::FaultHandler
{
	/* systask lifecycle. new tasks are introduced as their IDs appear at the
	 * interface, so the only lifecycle call is cleanup.
	 */
	void rm_task(in long systask_id);

	/* physical memory transfer from root. the caller should continue by
	 * sending one GrantItem of a page at most 1 << @size_log2 bytes long
	 * within the next 5 milliseconds; after that, the transfer times out. the
	 * correct tag for this message is { .t = 2 }; an incorrect tag will
	 * cancel the transfer. all delivered second messages will be processed;
	 * on failure Sysmem panics the system. (this works because no other IPC
	 * pattern in Sysmem accepts map/grant items.)
	 *
	 * caller must give the lowest physical page number in @frame_num. this is
	 * so that Sysmem may attempt to coalesce its received pages, which is
	 * useful when the amount of physical memory assigned to system tasks
	 * increases. for initialization, Sysmem also recognizes physical memory
	 * that belongs to it and takes them out of normal circulation.
	 *
	 * if @dest is not nilthread, adds the page to the corresponding address
	 * space. no-op if the space doesn't exist.
	 */
	oneway void send_phys(
		in L4X2::ThreadId dest, in L4X2::word frame_num, in long size_log2);

	/* virtual memory transfer from root. used to create system tasks from
	 * e.g. files on initrd once filesystems etc. have become available. the
	 * memory at @src_addr in root space will be assigned to @dest's space at
	 * @dest_addr. the page contents in root will be replaced with all zeroes
	 * (but only after a fault).
	 *
	 * also works for discarding memory from any systask when @dest=nilthread.
	 * such memory is replaced by logical zeroes.
	 *
	 * returns 0 on success or POSIX errno on failure, such as when @dest
	 * doesn't exist, or there's nothing at @src_addr.
	 */
	unsigned short send_virt(
		in L4X2::word src_addr,
		in L4X2::ThreadId dest, in L4X2::word dest_addr);

	/* alter the caller's program break. Sysmem's address space model is very
	 * simple: accesses to the zero page, and to addresses above the program
	 * break, are segfaults. other accesses allocate memory. lowering the
	 * program break deallocates memory. unlike POSIX brk(2) this'll never
	 * fail outright.
	 */
	void brk(in L4X2::word addr);

	/* send L4.X2 breath-of-life IPC to given thread. returns L4_ErrorCode()
	 * of the inner transaction if it failed, or 0 on success.
	 */
	unsigned short breath_of_life(
		in L4X2::ThreadId tid,
		in L4X2::word ip, in L4X2::word sp);

	/* get the inclusive extent of the systask indicated. only valid if
	 * set_kernel_areas() has been called first.
	 */
	void get_shape(
		out L4X2::word low, out L4X2::word high,
		in L4X2::ThreadId task)
			raises(Posix::Errno);

	/* set the UTCB and KIP areas for a systask, which must exist (or ENOENT).
	 * may only be called once (or EEXIST), both parameters must be valid (or
	 * EINVAL), neither parameter can point out of the user accessable address
	 * range (or EFAULT).
	 */
	void set_kernel_areas(
		in L4X2::ThreadId task,
		in L4X2::Fpage utcb_area, in L4X2::Fpage kip_area)
			raises(Posix::Errno);

	/* change flags for virtual memory pages in @range of @task. applies to
	 * the caller iff @task is nil. pops EINVAL if @task maps to caller or is
	 * otherwise invalid, if @range overlaps the KIP or UTCB area, if @or_mask
	 * would set bits cleared by @and_mask, or if @range isn't a regular
	 * flexpage. rights of @range are ignored.
	 *
	 * the flags for @or_mask and @and_mask are defined in <sneks/mm.h>. this
	 * operation will never bring a non-resident page back in; callers can
	 * instead unmap the page, apply flags, and re-fault.
	 */
	void alter_flags(
		in L4X2::ThreadId task, in L4X2::Fpage range,
		in L4X2::word or_mask, in L4X2::word and_mask)
			raises(Posix::Errno);
};


#endif
