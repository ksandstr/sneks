
#ifndef __SYS_FS_IDL__
#define __SYS_FS_IDL__

#include <l4x2.idl>
#include <posixlike.idl>


module Sneks {

/* userspace-facing interface for access to filesystem objects other than file
 * content.
 */
[StubPrefix(__fs), IfaceLabel(0xe006)]
interface Fs
{
	const long PATH_MAX = 4000;
	const long READ_MAX = 4 * 1024 * 1024;	/* L4.X2 strxfer max */

	typedef L4X2::word handle;
	typedef string<PATH_MAX> path;
	typedef sequence<octet, READ_MAX> buffer;

	/* opens files, sockets, fifoes, etc.; but directories only when
	 * O_DIRECTORY âˆˆ @flags.
	 */
	void openat(
		out handle file,
		in handle directory, in path pathref, in long flags,
		in Posix::mode_t mode)
			raises(Posix::Errno);

	void close(in handle fd)
		raises(Posix::Errno);

	/* simple synchronous I/O.
	 *
	 * (TODO: it'd be cool if we negative values of @position were interpret
	 * relative to end of file, like fseek(..., -position, SEEK_END). this
	 * requires an upgrade to sys/crt/fileio.c, though; and that's coming
	 * anyway.
	 *
	 * TODO: elaborate the design again, how i'm replacing the "duplicated
	 * positions" model with client-stored positions w/ cleverness for
	 * EOF-relative access.)
	 *
	 * (this causes an extra copy compared to e.g. a vm op that'd copy stuff
	 * into the client's memory. that is soluble, so we don't care about it
	 * for now.)
	 */
	void read(
		out buffer data,
		in handle fd, in long position, in L4X2::word length)
			raises(Posix::Errno);
};


};

#endif
